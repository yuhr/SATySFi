% -*- coding: utf-8 -*-

let \embed v = v

let \version = {ver. 1.00 gamma}

let \twitter-at-id at-id = `\texttt{@` ^ {\escape-for-latex{@at-id;}} ^ `}`

let \description dscr = {
  \\begin\{center\}\deeper{
    \\begin\{tabular\}\{ll\}
    \\hline\deeper(dscr-sep-lines dscr);\\hline
    \\end\{tabular\}
  }\\end\{center\}
}
and dscr-sep-lines dscr =
  match dscr with
  | []           -> {}
  | head :: []   -> head ^ {\\\\}
  | head :: tail ->
      head ^
        {\\\\
          \\hline\ } ^ (dscr-sep-lines tail)

let \d-item di dd = {@di; & @dd;}

let \synt synt = `\textcolor[rgb]{0,0,0.75}{\texttt{` ^ {\escape-for-latex{@synt;}} ^ `}}`

let \newword nw = `\textsf{` ^nw^ `}`

% ---- tokens ----
let toksty tok = `\:\text{\textcolor{red}{$\underline{\text{\textbf{` ^ tok ^ `}}}$}}\:`
let vartoksty tok = `\:\text{\textcolor{orange}{$\underline{\text{\textit{\textbf{` ^ tok ^ `}}}}$}}\:`
let \token-eoi   = vartoksty `eoi`
let \token-cs    = vartoksty `cs`
let \token-id    = vartoksty `id`
let \token-class = vartoksty `class`
let \token-char  = vartoksty `char`
let \token-ident = vartoksty `ident`
let \token-int   = vartoksty `int`
let \token-varinstr = toksty `@`
let \token-bgrp  = toksty `\{`
let \token-egrp  = toksty `\}`
let \token-sep   = toksty `|`
let \token-end   = toksty `;`
let \token-space = toksty `space`
let \token-break = toksty `break`

let \token-lparen = toksty `(`
let \token-rparen = toksty `)`
let \token-blist  = toksty `[`
let \token-elist  = toksty `]`
let \token-listpunct = toksty `;`
let \token-bin    = vartoksty `bin`
let \token-let    = toksty `let`
let \token-and    = toksty `and`
let \token-defeq  = toksty `=`
let \token-in     = toksty `in`
let \token-if     = toksty `if`
let \token-then   = toksty `then`
let \token-else   = toksty `else`
let \token-finish = toksty `finish`
let \token-opnqt  = toksty ``l\`{ }``
let \token-clsqt  = toksty ``\`{ }l``
let \token-opnstr = toksty `t\{`
let \token-clsstr = toksty `\}t`
let \token-opnprog = toksty `e(`
let \token-clsprog = toksty `)e`
let \token-if-class-is-valid = toksty `if-class-is-valid`
let \token-if-id-is-valid    = toksty `if-id-is-valid`
let \token-let-mutable       = toksty `let-mutable`
let \token-new-global-hash   = toksty `new-global-hash`
let \token-renew-global-hash = toksty `renew-global-hash`
let \token-owhash = toksty `$\leftarrow\!\!\!\leftarrow$`
let \token-function = toksty `function`
let \token-arrow  = toksty `$\rightarrow$`
let \token-oweq   = toksty `$\leftarrow$`
let \token-before = toksty `before`
let \token-while  = toksty `while`
let \token-do     = toksty `do`
let \token-true   = toksty `true`
let \token-false  = toksty `false`
let \token-unit   = toksty `()`
let \token-mutual     = toksty `mutual`
let \token-end-mutual = toksty `end-mutual`
%
let \repeat-star inner = `\:\Bigl[` ^inner^ `\Bigr]^{*}\:`
let \repeat-plus inner = `\:\Bigl[` ^inner^ `\Bigr]^{+}\:`
let cfl-or-sub lst =
  match lst with
  | []           -> {}
  | head :: []   -> head
  | head :: tail -> head ^ `|` ^ (cfl-or-sub tail)

let \cfl-or lst = `\:(` ^(cfl-or-sub lst)^ `)\:`

let nontmsty nontm = `\:\langle{}\mathit{` ^nontm^ `\/}\rangle{}\:`
let \TopLevel  = nontmsty `TopLevel`
let \TopSingle = nontmsty `TopSingle`
let \Expr      = nontmsty `Expr`
let \Dec       = nontmsty `Dec`
let \Text      = nontmsty `Text`
let \Args      = nontmsty `Args`
let \Literal   = nontmsty `Literal`
let \Single    = nontmsty `Single`
let \ExprArgs  = nontmsty `ExprArgs`
let \TextArgs  = nontmsty `TextArgs`
let \GroupInText = nontmsty `GroupInText`
let \GroupInExpr = nontmsty `GroupInExpr`

let \extension ext = `\texttt{` ^ext^ `}`

let \file-name fn = `\texttt{` ^{\escape-for-latex{@fn;}}^ `}`

let \math-dp-gather lst =
  `\begin{align*}` ^(deeper (sub-math-dp-gather lst))^ `\end{align*}`

and sub-math-dp-gather lst =
  match lst with
  | []           -> {}
  | head :: []   -> head
  | head :: tail -> head ^ `\\` ^ (sub-math-dp-gather tail)

let \cfl nontm lst =
  match lst with
  | []           -> {}
  | head :: tail ->
      nontm ^ {\ } ^ `\rightarrow&\enskip` ^ {\ } ^ head ^ `\enskip` ^ (sub-cfl tail)

and sub-cfl lst =
  match lst with
  | []           -> {}
  | head :: []   -> insert-bar head
  | head :: tail -> (insert-bar head) ^ {\ } ^ (sub-cfl tail)

and insert-bar s =
  if same s `!br`  then `\\&` ^ {\ }
                   else `|\enskip` ^ {\ } ^ s ^ `\enskip` ^ {\ }


let \code-display code =
  `\begin{breakbox}\begin{center}` ^(deeper
    `\parbox{0.9\textwidth}{` ^code^ `}`
  )^ `\end{center}\end{breakbox}\noindent` ^ {\ }

let \code code = code

let \code-break = `\\`

let \code-tab   = `\quad{}`

let \code-tabx n = if n <= 0 then {}
                             else `\enskip{}` ^ {\code-tabx(n - 1);}

let \meta metacode = `\textcolor{violet}{\textit{\texttt{` ^metacode^ `}}}`

let \metadots = `$\cdots$`

let \mcrd-display code =
  %\\begin\{center\}\deeper{
    %\\parbox\{0.9\\textwidth\}\{\\noindent%
      %\\textcolor\{blue\}\{\\texttt\{
      %  \strong-escape-for-latex{@code;}
      %\}\}%
    %\}%
  %}\\end\{center\}
  `{\small\begin{breakbox}` ^ break
  ^ `\begin{verbatim}` ^code^ `\end{verbatim}` ^ break
  ^ `\end{breakbox}}\noindent` ^ {\ }

let \mcrd-input name code =
    `\begin{mdframed}[style=codebox, frametitle={\textsf{入力\quad\texttt{` ^{\escape-for-latex{@name;}}^ `}}}]`
  ^ `{\small\begin{verbatim}` ^code^ `\end{verbatim}}`
  ^ `\end{mdframed}`

let \mcrd-output name code =
    `\begin{mdframed}[style=codebox, frametitle={\textsf{出力\quad\texttt{` ^{\escape-for-latex{@name;}}^ `}}}]`
  ^ `{\small\begin{verbatim}` ^code^ `\end{verbatim}}`
  ^ `\end{mdframed}`

let \mcrd code = {\synt{@code;}}

let \url-display url =
    `\begin{center}` ^(deeper (`\texttt{` ^url^ `}`))^ `\end{center}`

let type-synt ty = `\textcolor[rgb]{0.75,0,0}{\texttt{` ^ ty ^ `}}`
let type-meta ty = `\textcolor[rgb]{1,0.5,0}{\textit{\texttt{` ^ ty ^ `}}}`

type type-struct =
  | Int | String | Bool | Unit
  | Data  of string
  | Meta  of string
  | Bound of string
  | List  of type-struct
  | Ref   of type-struct
  | Func  of type-struct * type-struct
  | Prod  of type-struct list
  | Paren of type-struct
  | App of type-struct * type-struct

let display-type tystr =
  match tystr with
  | Int                -> `int`
  | String             -> `string`
  | Bool               -> `bool`
  | Unit               -> `unit`
  | Data(s)            -> s
  | Meta(s)            -> type-meta s
  | Bound(s)           -> {'@s;}
  | List(tycont)       -> display-s-type tycont `list`
  | Ref(tycont)        -> display-s-type tycont `ref`
  | Func(tydom, tycod) -> display-func-type tydom tycod
  | Prod(tylst)        -> display-prod-type tylst
  | Paren(tycont)      -> let scont = display-type tycont in {(@scont;)}
  | App(tyx, tyf)      -> display-s-type tyx (display-type tyf)

and display-s-type tycont s =
  let scont = display-type tycont in
    match tycont with
    | Func(_, _) -> {(@scont;) @s;}
    | Prod(_)    -> {(@scont;) @s;}
    | App(_, _)  -> {(@scont;) @s;}
    | _          -> {@scont; @s;}

and display-func-type tydom tycod =
  let sdom = display-type tydom in
  let scod = display-type tycod in
    match tydom with
    | Func(_, _) -> {(@sdom;) -> @scod;}
    | _          -> {@sdom; -> @scod;}

and display-prod-type tylst =
  match tylst with
  | []           -> {}
  | tyhd :: []   ->
      let shd = display-type tyhd in
      ( match tyhd with
        | Func(_, _) -> {(@shd;)}
        | Prod(_)    -> {(@shd;)}
        | _          -> shd
      )
  | tyhd :: tytl ->
      let shd = display-type tyhd in
      let stl = display-prod-type tytl in
      ( match tyhd with
        | Func(_, _) -> {(@shd;) \* @stl;}
        | Prod(_)    -> {(@shd;) \* @stl;}
        | _          -> {@shd; \* @stl;}
      )

let \type tystr = type-synt (display-type tystr)

let \mcrd-type code tystr = {\synt{@code;}\ :\ \type(tystr);}

let \quad = `\quad{}`
